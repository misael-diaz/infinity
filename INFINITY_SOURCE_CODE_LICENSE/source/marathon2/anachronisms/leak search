search malloc Å.cFile "crc.c"; Line ¥!1160:¤!6	# 		buffer= (unsigned char *) malloc(BUFFER_SIZE*sizeof(unsigned char));File "crc.c"; Line ¥!2011:¤!6	# 	crc_table= (unsigned long *) malloc(TABLE_SIZE*sizeof(unsigned long));File "images.c"; Line ¥!2544:¤!6	# 		picture_table= (struct color_table *) malloc(sizeof(struct color_table));File "images.c"; Line ¥!3009:¤!6	# 	system_colors= (struct color_table *) malloc(sizeof(struct color_table));File "interface.c"; Line ¥!36113:¤!6	# 	animated_color_table= (struct color_table *) malloc(sizeof(struct color_table));File "interface.c"; Line ¥!37732:¤!6	# 		fadeout_animated_color_table= (struct color_table *) malloc(sizeof(struct color_table));File "map.c"; Line ¥!8055:¤!6	# 		map_structure_memory.memory= (byte *) malloc(size);File "music.c"; Line ¥!2720:¤!6	# 			music_state->sound_buffer= malloc(music_state->sound_buffer_size);File "network.c"; Line ¥!69854:¤!6	# 			map_buffer = (byte *) malloc(map_length); // because my caller expects it to be portable.File "network.c"; Line ¥!81733:¤!6	# 	action_flag_buffer= (struct recorded_flag *) malloc(MAXIMUM_STREAM_FLAGS*sizeof(struct recorded_flag));File "preferences.c"; Line ¥!31238:¤!6	# 	accessory_files= (FSSpec *) malloc(MAXIMUM_FIND_FILES*sizeof(FSSpec));File "preferences.c"; Line ¥!31329:¤!6	# 	file_descriptions= (struct file_description *) malloc(MAXIMUM_FIND_FILES*sizeof(struct file_description));File "shell.c"; Line ¥!4882:¤!6	# void *level_transition_malloc(File "shell.c"; Line ¥!4918:¤!6	# 	void *ptr= malloc(size);File "shell.c"; Line ¥!4979:¤!6	# 		ptr= malloc(size);File "shell.c"; Line ¥!5050:¤!6	# 			ptr= malloc(size);File "vbl.c"; Line ¥!4893:¤!6	# 	replay.recording_queues = (ActionQueue *) malloc(MAXIMUM_NUMBER_OF_PLAYERS * sizeof(ActionQueue));File "vbl.c"; Line ¥!5320:¤!6	# 		queue->buffer= (long *) malloc(MAXIMUM_QUEUE_SIZE*sizeof(long));File "vbl.c"; Line ¥!10562:¤!6	# 		buffer = (long *)malloc((RECORD_CHUNK_SIZE * sizeof(long)) + RECORD_CHUNK_SIZE * sizeof(short));File "vbl.c"; Line ¥!16011:¤!6	# 			replay.fsread_buffer= malloc(DISK_CACHE_SIZE); File "vbl_macintosh.c"; Line ¥!5747:¤!6	# 					data= malloc(COPY_BUFFER_SIZE);File "vbl_macintosh.c"; Line ¥!7199:¤!6	# 		replay.resource_data= (char *) malloc(size);File "vbl_macintosh.c"; Line ¥!9058:¤!6	# 	action_flag_buffer= (struct recorded_flag *) malloc(MAXIMUM_STREAM_FLAGS*sizeof(struct recorded_flag));File "wad.c"; Line ¥!780:¤!6	# ¥ÊUse malloc to actually make it possible to read the data as changes are made in the future?File "wad.c"; Line ¥!902:¤!6	# // Note that level_transition_malloc is specific to marathon...File "wad.c"; Line ¥!3853:¤!6	# extern void *level_transition_malloc(size_t size);File "wad.c"; Line ¥!4527:¤!6	# 			raw_wad= (byte *) malloc(length);File "wad.c"; Line ¥!4587:¤!6	# 			raw_wad= (byte *) level_transition_malloc(length);File "wad.c"; Line ¥!6212:¤!6	# 						raw_wad= (byte *) malloc(length);File "wad.c"; Line ¥!11191:¤!6	# 	wad= (struct wad_data *) malloc(sizeof(struct wad_data));File "wad.c"; Line ¥!14854:¤!6	# 	data= malloc(size);File "wad.c"; Line ¥!15688:¤!6	# 		wad->tag_data= (struct tag_data *) malloc(wad->tag_count*sizeof(struct tag_data));File "wad.c"; Line ¥!16153:¤!6	# 	wad->tag_data[index].data= (byte *) malloc(size);File "wad.c"; Line ¥!16937:¤!6	# 		wad->tag_data= (struct tag_data *) malloc(wad->tag_count*sizeof(struct tag_data));File "wad.c"; Line ¥!21223:¤!6	# 				data= (struct encapsulated_wad_data *) malloc(length+sizeof(struct encapsulated_wad_data));File "wad.c"; Line ¥!28743:¤!6	# 	wad= (struct wad_data *) malloc(sizeof(struct wad_data));File "wad.c"; Line ¥!29097:¤!6	# 			wad->tag_data= (struct tag_data *) malloc(tag_count * sizeof(struct tag_data));File "wad.c"; Line ¥!30865:¤!6	# 	wad= (struct wad_data *) malloc(sizeof(struct wad_data));File "wad.c"; Line ¥!31219:¤!6	# 			wad->tag_data= (struct tag_data *) malloc(tag_count * sizeof(struct tag_data));File "wad.c"; Line ¥!31790:¤!6	# 					wad->tag_data[index].data= (byte *) malloc(wad_entry_header->length);File "wad.c"; Line ¥!36107:¤!6	# 	internal_data[actual_index]= malloc(sizeof(struct wad_internal_data));File "wad_prefs.c"; Line ¥!940:¤!6	# 	prefInfo= (struct preferences_info *) malloc(sizeof(struct preferences_info));File "wad_prefs.c"; Line ¥!3215:¤!6	# 		data= malloc(expected_size);File "wad_prefs.c"; Line ¥!3811:¤!6	# 			new_data= malloc(expected_size);File "find_files.c"; Line ¥!681:¤!6	# 		param_block->buffer= (FSSpec *) NewPtr(sizeof(FSSpec)*param_block->max);File "music.c"; Line ¥!2147:¤!6	# 		music_state= (struct music_data *) NewPtrClear(sizeof(struct music_data));File "network.c"; Line ¥!12165:¤!6	# 			topology= (NetTopologyPtr) NewPtrClear(sizeof(NetTopology));File "network.c"; Line ¥!12225:¤!6	# 			status= (NetStatusPtr) NewPtrClear(sizeof(NetStatus));File "network.c"; Line ¥!12290:¤!6	# 			network_adsp_packet= (char *) NewPtrClear(MaxADSPPacketLength());File "network.c"; Line ¥!12397:¤!6	# 				status->buffer= (byte *) NewPtrClear(ddpMaxData);File "network.c"; Line ¥!53746:¤!6	# 	data = (NetPacketPtr) NewPtr(sizeof(NetPacket));File "network_adsp.c"; Line ¥!1089:¤!6	# 		myDSPPBPtr= (DSPPBPtr) NewPtrClear(sizeof(DSPParamBlock));File "network_adsp.c"; Line ¥!1822:¤!6	# 	ConnectionEndPtr connectionEnd= (ConnectionEndPtr) NewPtrClear(sizeof(ConnectionEnd));File "network_adsp.c"; Line ¥!1949:¤!6	# 		connectionEnd->dspCCB= (TPCCB) NewPtrClear(sizeof(TRCCB));File "network_adsp.c"; Line ¥!2007:¤!6	# 		connectionEnd->dspSendQPtr= NewPtrClear(DSP_QUEUE_SIZE);File "network_adsp.c"; Line ¥!2066:¤!6	# 		connectionEnd->dspRecvQPtr= NewPtrClear(DSP_QUEUE_SIZE);File "network_adsp.c"; Line ¥!2127:¤!6	# 		connectionEnd->dspAttnBufPtr= NewPtrClear(attnBufSize);File "network_ddp.c"; Line ¥!1850:¤!6	# 	MPPPBPtr  myMPPPBPtr= (MPPPBPtr) NewPtrClear(sizeof(MPPParamBlock));File "network_ddp.c"; Line ¥!2461:¤!6	# 	ddpPacketBuffer= (DDPPacketBufferPtr) NewPtrClear(sizeof(DDPPacketBuffer));File "network_ddp.c"; Line ¥!3913:¤!6	# 		MPPPBPtr myMPPPBPtr= (MPPPBPtr) NewPtrClear(sizeof(MPPParamBlock));File "network_ddp.c"; Line ¥!4470:¤!6	# 	DDPFramePtr frame= (DDPFramePtr) NewPtrClear(sizeof(DDPFrame));File "network_ddp.c"; Line ¥!6322:¤!6	# 		killioPBPtr= (ParmBlkPtr) NewPtrClear(sizeof(ParamBlockRec));File "network_lookup.c"; Line ¥!2478:¤!6	# 	lookupMPPPBPtr= (MPPPBPtr) NewPtrClear(sizeof(MPPParamBlock));File "network_lookup.c"; Line ¥!2545:¤!6	# 	lookupEntity= (EntityNamePtr) NewPtrClear(sizeof(EntityName));File "network_lookup.c"; Line ¥!2593:¤!6	# 	lookupBuffer= NewPtrClear(NAMES_LIST_BUFFER_SIZE);File "network_lookup.c"; Line ¥!2668:¤!6	# 	lookupEntities= (NetLookupEntityPtr) NewPtr(MAXIMUM_LOOKUP_NAME_COUNT*sizeof(NetLookupEntity));File "network_lookup.c"; Line ¥!3818:¤!6	# 		MPPPBPtr myMPPPBPtr= (MPPPBPtr) NewPtrClear(sizeof(MPPParamBlock));File "network_lookup.c"; Line ¥!9402:¤!6	# 	zone_names= NewPtr(sizeof(Str32)*MAXIMUM_ZONE_NAMES);File "network_lookup.c"; Line ¥!10133:¤!6	# 	XPPParmBlkPtr xpb= (XPPParmBlkPtr) NewPtrClear(sizeof(XPPParamBlock));File "network_lookup.c"; Line ¥!10186:¤!6	# 	Ptr zip_buffer= NewPtrClear(578);File "network_lookup.c"; Line ¥!11877:¤!6	# 	XPPParmBlkPtr xpb= (XPPParmBlkPtr) NewPtrClear(sizeof(XPPParamBlock));File "network_names.c"; Line ¥!1088:¤!6	# 	MPPPBPtr myMPPPBPtr= (MPPPBPtr) NewPtrClear(sizeof(MPPParamBlock));File "network_names.c"; Line ¥!1455:¤!6	# 	myNTEName= (NamesTableEntryPtr) NewPtrSysClear(sizeof(NamesTableEntry));File "network_names.c"; Line ¥!2543:¤!6	# 		MPPPBPtr myMPPPBPtr= (MPPPBPtr) NewPtrClear(sizeof(MPPParamBlock));File "network_microphone.c"; Line ¥!2450:¤!6	# 			net_microphone.buffer= NewPtr(NETWORK_SOUND_CHUNK_BUFFER_SIZE);File "network_speaker.c"; Line ¥!2664:¤!6	# 	speaker= (struct speaker_definition *) NewPtr(sizeof(struct speaker_definition));File "network_speaker.c"; Line ¥!2897:¤!6	# 		speaker->channel= (SndChannelPtr) NewPtrClear(sizeof(SndChannel));File "network_speaker.c"; Line ¥!2976:¤!6	# 		speaker->header= (SndDoubleBufferHeaderPtr) NewPtrClear(sizeof(SndDoubleBufferHeader));File "network_speaker.c"; Line ¥!3038:¤!6	# 		speaker->queue= NewPtr(sizeof(byte)*MAXIMUM_QUEUE_SIZE);File "network_speaker.c"; Line ¥!3461:¤!6	# 			header->dbhBufferPtr[0]= (SndDoubleBufferPtr) NewPtrClear(sizeof(SndDoubleBuffer)+MAXIMUM_DOUBLE_BUFFER_SIZE);	File "network_speaker.c"; Line ¥!3576:¤!6	# 			header->dbhBufferPtr[1]= (SndDoubleBufferPtr) NewPtrClear(sizeof(SndDoubleBuffer)+MAXIMUM_DOUBLE_BUFFER_SIZE);	