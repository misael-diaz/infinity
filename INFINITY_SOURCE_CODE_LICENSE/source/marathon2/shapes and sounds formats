// MARATHON 2 SOUND FILE DEFINITIONa sound file consists of a sound_file_header structure followed by a number ofsound_definition structures.  marathon 2 loads the header and then all of thedefinition structures at startup.the .group_offset field of a definition gives the absolute file offset to thesound in question; .single_length is used for reading a single permutation, or.total_length if more sounds is checked in the preferences dialog.  the .sound_offsetsfield is a delta to .group_offset which points to each sound permutationthe actual data for a sound is a macintosh SndHeader or ExtSndHeader.enum{	MAXIMUM_PERMUTATIONS_PER_SOUND= 5};enum /* sound behaviors */{	_sound_is_quiet,	_sound_is_normal,	_sound_is_loud,	NUMBER_OF_SOUND_BEHAVIOR_DEFINITIONS};enum /* flags */{	_sound_cannot_be_restarted= 0x0001,	_sound_does_not_self_abort= 0x0002,	_sound_resists_pitch_changes= 0x0004, // 0.5 external pitch changes	_sound_cannot_change_pitch= 0x0008, // no external pitch changes	_sound_cannot_be_obstructed= 0x0010, // ignore obstructions	_sound_cannot_be_media_obstructed= 0x0020, // ignore media obstructions	_sound_is_ambient= 0x0040 // will not be loaded unless _ambient_sound_flag is asserted};enum /* sound chances */{	_ten_percent= 32768*9/10,	_twenty_percent= 32768*8/10,	_thirty_percent= 32768*7/10,	_fourty_percent= 32768*6/10,	_fifty_percent= 32768*5/10,	_sixty_percent= 32768*4/10,	_seventy_percent= 32768*3/10,	_eighty_percent= 32768*2/10,	_ninty_percent= 32768*1/10,	_always= 0};/* ---------- structures */enum{	SOUND_FILE_VERSION= 1,	SOUND_FILE_TAG= 'snd2'};struct sound_file_header{	long version;	long tag;		short source_count; // usually 2 (8-bit, 16-bit)	short sound_count;		short unused[124];		// immediately followed by permutation_count*sound_count sound_definition structures};struct sound_definition /* 64 bytes */{	short sound_code;		short behavior_index;	word flags;	word chance; // play sound if AbsRandom()>=chance		/* if low_pitch==0, use FIXED_ONE; if high_pitch==0 use low pitch; else choose in [low_pitch,high_pitch] */	fixed low_pitch, high_pitch;		/* filled in later */	short permutations;	word permutations_played;	long group_offset, single_length, total_length; // magic numbers necessary to load sounds	long sound_offsets[MAXIMUM_PERMUTATIONS_PER_SOUND]; // zero-based from group offset		unsigned long last_played; // machine ticks		long handle; // (machine-specific pointer type) zero if not loaded		short unused[2];};// MARATHON 2 SHAPE FILE DEFINITIONa shape file consists of MAXIMUM_COLLECTIONS collection_header structures followedby raw collection data.  marathon 2 loads the all collection_headers at startup.when a collection needs to be loaded, marathon 2 reads .length bytes from .offset(or .length16 bytes from .offset16 if we are in 16-bit or 24-bit mode; note thatif .offset16 is negative a 16-bit collection does not exist for this collection)into the shapes file.the first thing in this block of memory is the collection_definition structure,which contains offsets into itself for all structures.typedef short shape_descriptor; /* [clut.3] [collection.5] [shape.8] */#define DESCRIPTOR_SHAPE_BITS 8#define DESCRIPTOR_COLLECTION_BITS 5#define DESCRIPTOR_CLUT_BITS 3#define MAXIMUM_COLLECTIONS (1<<DESCRIPTOR_COLLECTION_BITS)#define MAXIMUM_SHAPES_PER_COLLECTION (1<<DESCRIPTOR_SHAPE_BITS)#define MAXIMUM_CLUTS_PER_COLLECTION (1<<DESCRIPTOR_CLUT_BITS)struct collection_header /* 32 bytes */{	short status;	word flags;	long offset, length;	long offset16, length16;	struct collection_definition **collection;	void **shading_tables;		short unused[2];};/* ---------- collection definition structure *//* 2 added pixels_to_world to collection_definition structure *//* 3 added size to collection_definition structure */#define COLLECTION_VERSION 3/* at the beginning of the clut, used by the extractor for various opaque reasons */#define NUMBER_OF_PRIVATE_COLORS 3enum /* collection types */{	_unused_collection= 0, /* raw */	_wall_collection, /* raw */	_object_collection, /* rle */	_interface_collection, /* raw */	_scenery_collection /* rle */};struct collection_definition{	short version;		short type; /* used for get_shape_descriptors() */	word flags; /* [unused.16] */		short color_count, clut_count;	long color_table_offset; /* an array of clut_count arrays of color_count ColorSpec structures */	short high_level_shape_count;	long high_level_shape_offset_table_offset;	short low_level_shape_count;	long low_level_shape_offset_table_offset;	short bitmap_count;	long bitmap_offset_table_offset;	short pixels_to_world; /* used to shift pixel values into world coordinates */		long size; /* used to assert offsets */		short unused[253];};/* ---------- high level shape definition */#define HIGH_LEVEL_SHAPE_NAME_LENGTH 32struct high_level_shape_definition{	short type; /* ==0 */	word flags; /* [unused.16] */		char name[HIGH_LEVEL_SHAPE_NAME_LENGTH+1];		short number_of_views;		short frames_per_view, ticks_per_frame;	short key_frame;		short transfer_mode;	short transfer_mode_period; /* in ticks */		short first_frame_sound, key_frame_sound, last_frame_sound;	short pixels_to_world;	short loop_frame;	short unused[14];	/* number_of_views*frames_per_view indexes of low-level shapes follow */	short low_level_shape_indexes[1];};/* --------- low-level shape definition */#define _X_MIRRORED_BIT 0x8000#define _Y_MIRRORED_BIT 0x4000#define _KEYPOINT_OBSCURED_BIT 0x2000struct low_level_shape_definition{	word flags; /* [x-mirror.1] [y-mirror.1] [keypoint_obscured.1] [unused.13] */	fixed minimum_light_intensity; /* in [0,FIXED_ONE] */	short bitmap_index;		/* (x,y) in pixel coordinates of origin */	short origin_x, origin_y;		/* (x,y) in pixel coordinates of key point */	short key_x, key_y;	short world_left, world_right, world_top, world_bottom;	short world_x0, world_y0;		short unused[4];};/* ---------- colors */enum{	SELF_LUMINESCENT_COLOR_FLAG= 0x80};struct rgb_color_value{	byte flags;	byte value;		word red, green, blue;};